[[plugins]] # プラグイン管理
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
  let g:unite_enable_start_insert=1
  let g:unite_source_history_yank_enable =1
  let g:unite_source_file_mru_limit = 200
  nnoremap <silent> ,y :<C-u>Unite history/yank<CR>
  nnoremap <silent> ,b :<C-u>Unite buffer<CR>
  nnoremap <silent> ,f :<C-u>Unite file<CR>
  nnoremap <silent> ,c :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
  nnoremap <silent> ,r :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <silent> ,u :<C-u>Unite file_mru buffer<CR>
  nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

  if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
  endif
'''

[[plugins]] # ファイラー
repo = 'Shougo/vimfiler'
hook_add= '''
  let g:vimfiler_safe_mode_by_default=0
  nnoremap <silent> ,e :<C-u>:VimFilerExplore -split -winwidth=30 -find -no-quit<CR>
'''

[[plugins]] # Unite で grep した後に replace できるようになる
repo = 'thinca/vim-qfreplace'


[[plugins]] # 構文チェック
repo = 'scrooloose/syntastic'

[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'

[[plugins]] # ステータスラインをかっこよくする
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'gruvbox'}
'''

[[plugins]] # インデントを見やすくしてくれる
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray
  let g:indent_guides_guide_size = 1
'''

[[plugins]] # 不要な空白をハイライト
repo = 'ntpeters/vim-better-whitespace'

[[plugins]] # 非同期処理用
repo = 'tpope/vim-dispatch'

[[plugins]] # Unite のための MRU プラグイン
repo = 'Shougo/neomru.vim'

[[plugins]] # テストをショートカットキーで実行
repo = 'janko-m/vim-test'
hook_add = '''
  let test#ruby#use_spring_binstub = 1
  nnoremap <silent> ,tn :TestNearest<CR>
  nnoremap <silent> ,tf :TestFile<CR>
  nnoremap <silent> ,ts :TestSuite<CR>
'''

[[plugins]] # コメントアウト x ヴィジュアルモード
repo = 'tomtom/tcomment_vim'

[[plugins]] # クリップボードを yank, paste できるように
repo = 'kana/vim-fakeclip'

[[plugins]] # yes <=> false
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  nnoremap <silent> ,s :Switch<CR>
'''

[[plugins]] # sneak_case <=> CamelCase
repo = 'tpope/vim-abolish'

[[plugins]] # 人間に見やすくテキストを整形してくれる
repo = 'junegunn/vim-easy-align'
hook_add = '''
  nmap ,a <Plug>(EasyAlign)
  xmap ,a <Plug>(EasyAlign)
'''

[[plugins]] # 表整形
repo = 'godlygeek/tabular'


###
## Ruby
###

[[plugins]] # Rails用ユーティリティ
repo = 'tpope/vim-rails'

[[plugins]] # `end` とかを補完してくれる
repo = 'tpope/vim-endwise'


###
## シンタックスハイライト系
###

[[plugins]] # JSON
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]] # GraphQL
repo = 'jparise/vim-graphql'

[[plugins]] # TOML
repo = 'cespare/vim-toml'

[[plugins]] # CoffeeScript
repo = 'kchmck/vim-coffee-script'

[[plugins]] # Pug
repo = 'digitaltoad/vim-pug'

[[plugins]] # Slim
repo = 'slim-template/vim-slim.git'

[[plugins]] # JavaScript
repo = 'othree/yajs.vim'

[[plugins]] # ES6, NEXT
repo = 'othree/es.next.syntax.vim'

[[plugins]] # JSX
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]] # Elm
repo = 'andys8/vim-elm-syntax'

[[plugins]]
repo = 'stephenway/postcss.vim'

###
# 補完
###

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_source = 'call coil398#init#coc#hook_source()'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
#   let g:deoplete#enable_at_startup = 0
# '''

# [[plugins]]
# repo = 'Shougo/neocomplcache'
# hook_add = '''
#   let g:acp_enableAtStartup = 0
#   let g:neocomplcache_enable_at_startup = 1
#   let g:neocomplcache_enable_smart_case = 1
#   let g:neocomplcache_min_syntax_length = 2
#   let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
#   let g:neocomplcache_dictionary_filetype_lists = {
#       \ 'default' : ''
#       \ }
#   inoremap <expr><C-g>     neocomplcache#undo_completion()
#   inoremap <expr><C-l>     neocomplcache#complete_common_string()
#   " <CR>: close popup and save indent.
#   inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#   function! s:my_cr_function()
#     return neocomplcache#smart_close_popup() . "\<CR>"
#   endfunction
#   " <TAB>: completion.
#   inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
#   " <C-h>, <BS>: close popup and delete backword char.
#   inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
#   inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
#   inoremap <expr><C-y>  neocomplcache#close_popup()
#   inoremap <expr><C-e>  neocomplcache#cancel_popup()
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet'
# hook_add = '''
#   imap <C-k>     <Plug>(neosnippet_expand_or_jump)
#   smap <C-k>     <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k>     <Plug>(neosnippet_expand_target)
#
#   smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
#
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
