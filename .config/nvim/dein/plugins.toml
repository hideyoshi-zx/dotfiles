[[plugins]] # プラグイン管理
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]] # Unite で grep した後に replace できるようになる
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  " vim-qfreplace の設定
  if dein#tap('denite.nvim') && dein#tap('vim-qfreplace')
    function! MyDeniteReplace(context)
      let s:qflist = []
      for target in a:context['targets']
        if !has_key(target, 'action__path') | continue | endif
        if !has_key(target, 'action__line') | continue | endif
        if !has_key(target, 'action__text') | continue | endif

        call add(s:qflist, {
              \ 'filename': target['action__path'],
              \ 'lnum': target['action__line'],
              \ 'text': target['action__text']
              \ })
      endfor
      call setqflist(s:qflist)
      call qfreplace#start('')
    endfunction
    call denite#custom#action('file', 'qfreplace', function('MyDeniteReplace'))
  endif

  " マッピング
  nnoremap [denite] <Nop>
  nmap , [denite]

  " カレントディレクトリ下のファイル一覧(再帰)
  nnoremap <silent> [denite]f :<C-u>Denite file/rec -start-filter<CR>

  " 現在開いているファイルのディレクトリ下のファイル一覧
  nnoremap <silent> [denite]c :<C-u>DeniteBufferDir file -start-filter<CR>

  " バッファ一覧
  nnoremap <silent> [denite]b :<C-u>Denite buffer -start-filter<CR>

  " 検索
  nnoremap <silent> [denite]g :<C-u>Denite grep -winwidth=`&columns` -buffer-name=search-buffer-denite<CR>
  " 検索結果を再表示する
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  " 検索結果の次の行の結果へ飛ぶ
  nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -cursor-pos=+1 -immediately<CR>
  " 検索結果の前の行の結果へ飛ぶ
  nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -cursor-pos=-1 -immediately<CR>

	" フィルター時のマッピング
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> r
    \ denite#do_map('do_action', 'qfreplace')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction

	autocmd FileType denite-filter call s:denite_filter_my_settings()
	function! s:denite_filter_my_settings() abort
    " エンター時にアクションを実行
    inoremap <silent><buffer><expr> <Enter> denite#do_map('do_action')

    " 閉じる
    imap <silent><buffer> <C-c> <Plug>(denite_filter_update)
    nmap <silent><buffer> <C-c> <Plug>(denite_filter_update)
    imap <silent><buffer> <C-[> <Plug>(denite_filter_update)
    nmap <silent><buffer> <C-[> <Plug>(denite_filter_update)
    nmap <silent><buffer> q <Plug>(denite_filter_quit)
	endfunction

	call denite#custom#source('file/rec', 'matchers', ['matcher/regexp'])
	call denite#custom#source('file', 'matchers', ['matcher/regexp'])
	call denite#custom#source('buffer', 'matchers', ['matcher/regexp'])

	" file/rec で Pt(the platinum searcher) を使う
	call denite#custom#var('file/rec', 'command',
	\ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden',
  \  '--ignore=".git"', '--ignore="node_modules"', '--ignore="vendor/bundle"',
	\  (has('win32') ? '-g:' : '-g='), ''])

	" grep で Pt(the platinum searcher) を使う
	call denite#custom#var('grep', 'command', ['pt'])
	call denite#custom#var('grep', 'default_opts',
  \ ['-i', '--nogroup', '--nocolor', '--smart-case', '--hidden', '--ignore=".git"', '--ignore="node_modules"', '--ignore="vendor/bundle"'])
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])
	call denite#custom#var('grep', 'max_path_length', 100)
  call denite#custom#source('grep', 'converters', ['converter/abbr_word'])
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]] # ファイラー
repo = 'Shougo/vimfiler'
hook_add= '''
  let g:vimfiler_safe_mode_by_default=0
  nnoremap <silent> ,e :<C-u>:VimFilerExplore -split -winwidth=60 -find -no-quit<CR>
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && yarn install"'
hook_add = '''
  let g:mkdp_filetypes = ['markdown', 'plantuml', 'mermaid']
'''

[[plugins]] # 構文チェック
repo = 'scrooloose/syntastic'

[[plugins]] # カラースキーム
repo = 'morhetz/gruvbox'

[[plugins]] # ステータスラインをかっこよくする
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {'colorscheme': 'gruvbox'}
'''

[[plugins]] # インデントを見やすくしてくれる
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray
  let g:indent_guides_guide_size = 1
'''

[[plugins]] # 不要な空白をハイライト
repo = 'ntpeters/vim-better-whitespace'

[[plugins]] # 非同期処理用
repo = 'tpope/vim-dispatch'

[[plugins]] # Unite のための MRU プラグイン
repo = 'Shougo/neomru.vim'

[[plugins]] # テストをショートカットキーで実行
repo = 'janko-m/vim-test'
hook_add = '''
  let test#ruby#use_spring_binstub = 1
  nnoremap <silent> ,tn :TestNearest<CR>
  nnoremap <silent> ,tf :TestFile<CR>
  nnoremap <silent> ,ts :TestSuite<CR>
'''

[[plugins]] # コメントアウト x ヴィジュアルモード
repo = 'tomtom/tcomment_vim'

[[plugins]] # クリップボードを yank, paste できるように
repo = 'kana/vim-fakeclip'

[[plugins]] # yes <=> false
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  nnoremap <silent> ,s :Switch<CR>
'''

[[plugins]] # sneak_case <=> CamelCase
repo = 'tpope/vim-abolish'

[[plugins]] # 人間に見やすくテキストを整形してくれる
repo = 'junegunn/vim-easy-align'
hook_add = '''
  nmap ,a <Plug>(EasyAlign)
  xmap ,a <Plug>(EasyAlign)
'''

[[plugins]] # 表整形
repo = 'godlygeek/tabular'

[[plugins]] # Github Copilot
repo = 'github/copilot.vim'

###
## Ruby
###

[[plugins]] # Rails用ユーティリティ
repo = 'tpope/vim-rails'

[[plugins]] # `end` とかを補完してくれる
repo = 'tpope/vim-endwise'


###
## シンタックスハイライト系
###

[[plugins]] # JSON
repo = 'elzr/vim-json'
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]] # GraphQL
repo = 'jparise/vim-graphql'

[[plugins]] # TOML
repo = 'cespare/vim-toml'

[[plugins]] # CoffeeScript
repo = 'kchmck/vim-coffee-script'

[[plugins]] # Pug
repo = 'digitaltoad/vim-pug'

[[plugins]] # Slim
repo = 'slim-template/vim-slim.git'

[[plugins]] # JavaScript
repo = 'othree/yajs.vim'

[[plugins]] # ES6, NEXT
repo = 'othree/es.next.syntax.vim'

[[plugins]] # TypeScript
repo = 'leafgarland/typescript-vim'

[[plugins]] # Prisma
repo = 'pantharshit00/vim-prisma'

[[plugins]] # JSX
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]] # Elm
repo = 'andys8/vim-elm-syntax'

[[plugins]]
repo = 'stephenway/postcss.vim'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]] # *.rbs(Ruby Signature)
repo = 'jlcrochet/vim-rbs'

[[plugins]]
repo = 'mracos/mermaid.vim'

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
  let g:rustfmt_autosave = 1
'''


###
# 補完
###

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
  " Use `g[` and `g]` to navigate diagnostics
  nmap <silent> g[ <Plug>(coc-diagnostic-prev)
  nmap <silent> g] <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  command! -nargs=0 Prettier :CocCommand prettier.formatFile

  let g:coc_global_extensions = [
    \'coc-prettier',
    \'coc-eslint',
    \'coc-tsserver',
    \'coc-solargraph',
    \'coc-json'
  \]
'''
